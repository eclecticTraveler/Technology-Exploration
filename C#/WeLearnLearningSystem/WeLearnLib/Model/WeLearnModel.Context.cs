//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeLearnLib.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WeLearnDBmsEntities : DbContext
    {
        public WeLearnDBmsEntities()
            : base("name=WeLearnDBmsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Workspace> Workspaces { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spAllUsers_Result> spAllUsers(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAllUsers_Result>("spAllUsers", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> spInsertWeLearnUser(string firstName, string lastName, string email, string username, string password, string gender, string typeOfUser, string userPicAddress)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var typeOfUserParameter = typeOfUser != null ?
                new ObjectParameter("typeOfUser", typeOfUser) :
                new ObjectParameter("typeOfUser", typeof(string));
    
            var userPicAddressParameter = userPicAddress != null ?
                new ObjectParameter("userPicAddress", userPicAddress) :
                new ObjectParameter("userPicAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("spInsertWeLearnUser", firstNameParameter, lastNameParameter, emailParameter, usernameParameter, passwordParameter, genderParameter, typeOfUserParameter, userPicAddressParameter);
        }
    
        public virtual ObjectResult<spIsUserInSystem_Result> spIsUserInSystem(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spIsUserInSystem_Result>("spIsUserInSystem", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<func_GetAllUsers_Result> func_GetAllUsers(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<func_GetAllUsers_Result>("func_GetAllUsers", userIdParameter);
        }
    
        public virtual ObjectResult<fun_IsUserInSystem_Result> fun_IsUserInSystem(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fun_IsUserInSystem_Result>("fun_IsUserInSystem", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spRetriveAllCoursesFromUser_Result> spRetriveAllCoursesFromUser(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRetriveAllCoursesFromUser_Result>("spRetriveAllCoursesFromUser", userIdParameter);
        }
    
        public virtual ObjectResult<spRetriveUserDocuments_Result> spRetriveUserDocuments(Nullable<long> userId, string context)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var contextParameter = context != null ?
                new ObjectParameter("context", context) :
                new ObjectParameter("context", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRetriveUserDocuments_Result>("spRetriveUserDocuments", userIdParameter, contextParameter);
        }
    
        public virtual ObjectResult<fun_GetOrRetriveAllCoursesFromUser_Result> fun_GetOrRetriveAllCoursesFromUser(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fun_GetOrRetriveAllCoursesFromUser_Result>("fun_GetOrRetriveAllCoursesFromUser", userIdParameter);
        }
    
        public virtual ObjectResult<fun_GetOrRetriveUserDocuments_Result> fun_GetOrRetriveUserDocuments(Nullable<long> userId, string context)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var contextParameter = context != null ?
                new ObjectParameter("context", context) :
                new ObjectParameter("context", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fun_GetOrRetriveUserDocuments_Result>("fun_GetOrRetriveUserDocuments", userIdParameter, contextParameter);
        }
    
        public virtual ObjectResult<fun_GetUserCourses_Result> fun_GetUserCourses(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fun_GetUserCourses_Result>("fun_GetUserCourses", userIdParameter);
        }
    
        public virtual ObjectResult<fun_GetAllChatUsers_Result> fun_GetAllChatUsers(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fun_GetAllChatUsers_Result>("fun_GetAllChatUsers", userIdParameter);
        }
    
        public virtual ObjectResult<spRetriveUserChatConversation_Result> spRetriveUserChatConversation(Nullable<long> userLoggedIn, Nullable<long> userChattingWith)
        {
            var userLoggedInParameter = userLoggedIn.HasValue ?
                new ObjectParameter("userLoggedIn", userLoggedIn) :
                new ObjectParameter("userLoggedIn", typeof(long));
    
            var userChattingWithParameter = userChattingWith.HasValue ?
                new ObjectParameter("userChattingWith", userChattingWith) :
                new ObjectParameter("userChattingWith", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRetriveUserChatConversation_Result>("spRetriveUserChatConversation", userLoggedInParameter, userChattingWithParameter);
        }
    
        public virtual ObjectResult<spGetUserChatConversation_Result> spGetUserChatConversation(Nullable<long> userLoggedIn, Nullable<long> userChattingWith)
        {
            var userLoggedInParameter = userLoggedIn.HasValue ?
                new ObjectParameter("userLoggedIn", userLoggedIn) :
                new ObjectParameter("userLoggedIn", typeof(long));
    
            var userChattingWithParameter = userChattingWith.HasValue ?
                new ObjectParameter("userChattingWith", userChattingWith) :
                new ObjectParameter("userChattingWith", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserChatConversation_Result>("spGetUserChatConversation", userLoggedInParameter, userChattingWithParameter);
        }
    
        public virtual int spInsertUserEvent(string docUUID, string docType, string docCont, string docText, Nullable<long> docVer, Nullable<System.DateTime> docDate, string docDesc, Nullable<long> sessionUserId)
        {
            var docUUIDParameter = docUUID != null ?
                new ObjectParameter("docUUID", docUUID) :
                new ObjectParameter("docUUID", typeof(string));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("docType", docType) :
                new ObjectParameter("docType", typeof(string));
    
            var docContParameter = docCont != null ?
                new ObjectParameter("docCont", docCont) :
                new ObjectParameter("docCont", typeof(string));
    
            var docTextParameter = docText != null ?
                new ObjectParameter("docText", docText) :
                new ObjectParameter("docText", typeof(string));
    
            var docVerParameter = docVer.HasValue ?
                new ObjectParameter("docVer", docVer) :
                new ObjectParameter("docVer", typeof(long));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("docDate", docDate) :
                new ObjectParameter("docDate", typeof(System.DateTime));
    
            var docDescParameter = docDesc != null ?
                new ObjectParameter("docDesc", docDesc) :
                new ObjectParameter("docDesc", typeof(string));
    
            var sessionUserIdParameter = sessionUserId.HasValue ?
                new ObjectParameter("sessionUserId", sessionUserId) :
                new ObjectParameter("sessionUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertUserEvent", docUUIDParameter, docTypeParameter, docContParameter, docTextParameter, docVerParameter, docDateParameter, docDescParameter, sessionUserIdParameter);
        }
    
        public virtual int fun_InsertUserEvent(string docUUID, string docType, string docCont, string docText, Nullable<long> docVer, Nullable<System.DateTime> docDate, string docDesc, Nullable<long> sessionUserId)
        {
            var docUUIDParameter = docUUID != null ?
                new ObjectParameter("docUUID", docUUID) :
                new ObjectParameter("docUUID", typeof(string));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("docType", docType) :
                new ObjectParameter("docType", typeof(string));
    
            var docContParameter = docCont != null ?
                new ObjectParameter("docCont", docCont) :
                new ObjectParameter("docCont", typeof(string));
    
            var docTextParameter = docText != null ?
                new ObjectParameter("docText", docText) :
                new ObjectParameter("docText", typeof(string));
    
            var docVerParameter = docVer.HasValue ?
                new ObjectParameter("docVer", docVer) :
                new ObjectParameter("docVer", typeof(long));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("docDate", docDate) :
                new ObjectParameter("docDate", typeof(System.DateTime));
    
            var docDescParameter = docDesc != null ?
                new ObjectParameter("docDesc", docDesc) :
                new ObjectParameter("docDesc", typeof(string));
    
            var sessionUserIdParameter = sessionUserId.HasValue ?
                new ObjectParameter("sessionUserId", sessionUserId) :
                new ObjectParameter("sessionUserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fun_InsertUserEvent", docUUIDParameter, docTypeParameter, docContParameter, docTextParameter, docVerParameter, docDateParameter, docDescParameter, sessionUserIdParameter);
        }
    
        public virtual int spUpdateUserEvent(string docUUID, string docText, Nullable<long> docVer, Nullable<System.DateTime> docDate, string docDesc)
        {
            var docUUIDParameter = docUUID != null ?
                new ObjectParameter("docUUID", docUUID) :
                new ObjectParameter("docUUID", typeof(string));
    
            var docTextParameter = docText != null ?
                new ObjectParameter("docText", docText) :
                new ObjectParameter("docText", typeof(string));
    
            var docVerParameter = docVer.HasValue ?
                new ObjectParameter("docVer", docVer) :
                new ObjectParameter("docVer", typeof(long));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("docDate", docDate) :
                new ObjectParameter("docDate", typeof(System.DateTime));
    
            var docDescParameter = docDesc != null ?
                new ObjectParameter("docDesc", docDesc) :
                new ObjectParameter("docDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateUserEvent", docUUIDParameter, docTextParameter, docVerParameter, docDateParameter, docDescParameter);
        }
    
        public virtual int fun_UpdateUserEvent(string docUUID, string docText, Nullable<long> docVer, Nullable<System.DateTime> docDate, string docDesc)
        {
            var docUUIDParameter = docUUID != null ?
                new ObjectParameter("docUUID", docUUID) :
                new ObjectParameter("docUUID", typeof(string));
    
            var docTextParameter = docText != null ?
                new ObjectParameter("docText", docText) :
                new ObjectParameter("docText", typeof(string));
    
            var docVerParameter = docVer.HasValue ?
                new ObjectParameter("docVer", docVer) :
                new ObjectParameter("docVer", typeof(long));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("docDate", docDate) :
                new ObjectParameter("docDate", typeof(System.DateTime));
    
            var docDescParameter = docDesc != null ?
                new ObjectParameter("docDesc", docDesc) :
                new ObjectParameter("docDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fun_UpdateUserEvent", docUUIDParameter, docTextParameter, docVerParameter, docDateParameter, docDescParameter);
        }
    
        public virtual int spDeleteNotPermanentlyUserEvent(string docUUID)
        {
            var docUUIDParameter = docUUID != null ?
                new ObjectParameter("docUUID", docUUID) :
                new ObjectParameter("docUUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteNotPermanentlyUserEvent", docUUIDParameter);
        }
    
        public virtual int spDeleteUserEvent(string docUUID)
        {
            var docUUIDParameter = docUUID != null ?
                new ObjectParameter("docUUID", docUUID) :
                new ObjectParameter("docUUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteUserEvent", docUUIDParameter);
        }
    }
}
